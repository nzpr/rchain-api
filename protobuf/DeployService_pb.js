/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var CasperMessage_pb = require('./CasperMessage_pb.js');
goog.object.extend(proto, CasperMessage_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var RhoTypes_pb = require('./RhoTypes_pb.js');
goog.object.extend(proto, RhoTypes_pb);
var Either_pb = require('./Either_pb.js');
goog.object.extend(proto, Either_pb);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockInfo', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockQueryResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlocksQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ContinuationAtNameQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.DataAtNameQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.DataWithBlockInfo', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.DeployServiceResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.FindDeployInBlockQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.FindDeployQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.LightBlockInfo', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.LightBlockQueryResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ListeningNameDataResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.MachineVerifyQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.MachineVerifyResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.VisualizeBlocksResponse', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.VisualizeDagQuery', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.WaitingContinuationInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.FindDeployQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.FindDeployQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.FindDeployQuery.displayName = 'proto.coop.rchain.casper.protocol.FindDeployQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.FindDeployQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.FindDeployQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployid: msg.getDeployid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.FindDeployQuery}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.FindDeployQuery;
  return proto.coop.rchain.casper.protocol.FindDeployQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.FindDeployQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.FindDeployQuery}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.FindDeployQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.FindDeployQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeployid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes deployId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.prototype.getDeployid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deployId = 1;
 * This is a type-conversion wrapper around `getDeployid()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.prototype.getDeployid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployid()));
};


/**
 * optional bytes deployId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployid()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.FindDeployQuery.prototype.getDeployid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployid()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.FindDeployQuery.prototype.setDeployid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.FindDeployInBlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.displayName = 'proto.coop.rchain.casper.protocol.FindDeployInBlockQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.FindDeployInBlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.FindDeployInBlockQuery}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.FindDeployInBlockQuery;
  return proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.FindDeployInBlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.FindDeployInBlockQuery}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.FindDeployInBlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.setUser = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.FindDeployInBlockQuery.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockQuery.displayName = 'proto.coop.rchain.casper.protocol.BlockQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockQuery}
 */
proto.coop.rchain.casper.protocol.BlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockQuery;
  return proto.coop.rchain.casper.protocol.BlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockQuery}
 */
proto.coop.rchain.casper.protocol.BlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockQuery.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockQuery.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlocksQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlocksQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlocksQuery.displayName = 'proto.coop.rchain.casper.protocol.BlocksQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlocksQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlocksQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlocksQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlocksQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlocksQuery}
 */
proto.coop.rchain.casper.protocol.BlocksQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlocksQuery;
  return proto.coop.rchain.casper.protocol.BlocksQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlocksQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlocksQuery}
 */
proto.coop.rchain.casper.protocol.BlocksQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlocksQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlocksQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlocksQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlocksQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlocksQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlocksQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.DataAtNameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.DataAtNameQuery.displayName = 'proto.coop.rchain.casper.protocol.DataAtNameQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.DataAtNameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.DataAtNameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: (f = msg.getName()) && RhoTypes_pb.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.DataAtNameQuery}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.DataAtNameQuery;
  return proto.coop.rchain.casper.protocol.DataAtNameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.DataAtNameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.DataAtNameQuery}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.DataAtNameQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.DataAtNameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Par name = 2;
 * @return {?proto.Par}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.getName = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.getWrapperField(this, RhoTypes_pb.Par, 2));
};


/** @param {?proto.Par|undefined} value */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.DataAtNameQuery.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ContinuationAtNameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.displayName = 'proto.coop.rchain.casper.protocol.ContinuationAtNameQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ContinuationAtNameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    namesList: jspb.Message.toObjectList(msg.getNamesList(),
    RhoTypes_pb.Par.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ContinuationAtNameQuery}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ContinuationAtNameQuery;
  return proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ContinuationAtNameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ContinuationAtNameQuery}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ContinuationAtNameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Par names = 2;
 * @return {!Array<!proto.Par>}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.getNamesList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, RhoTypes_pb.Par, 2));
};


/** @param {!Array<!proto.Par>} value */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.setNamesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.addNames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Par, opt_index);
};


proto.coop.rchain.casper.protocol.ContinuationAtNameQuery.prototype.clearNamesList = function() {
  this.setNamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.DeployServiceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.DeployServiceResponse.displayName = 'proto.coop.rchain.casper.protocol.DeployServiceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.DeployServiceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.DeployServiceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.DeployServiceResponse}
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.DeployServiceResponse;
  return proto.coop.rchain.casper.protocol.DeployServiceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.DeployServiceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.DeployServiceResponse}
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.DeployServiceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.DeployServiceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.DeployServiceResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.DeployServiceResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockQueryResponse.displayName = 'proto.coop.rchain.casper.protocol.BlockQueryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockinfo: (f = msg.getBlockinfo()) && proto.coop.rchain.casper.protocol.BlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockQueryResponse}
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockQueryResponse;
  return proto.coop.rchain.casper.protocol.BlockQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockQueryResponse}
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.BlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.BlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.BlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockInfo blockInfo = 1;
 * @return {?proto.coop.rchain.casper.protocol.BlockInfo}
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.prototype.getBlockinfo = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.BlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.BlockInfo, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.BlockInfo|undefined} value */
proto.coop.rchain.casper.protocol.BlockQueryResponse.prototype.setBlockinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.BlockQueryResponse.prototype.clearBlockinfo = function() {
  this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.BlockQueryResponse.prototype.hasBlockinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.LightBlockQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.LightBlockQueryResponse.displayName = 'proto.coop.rchain.casper.protocol.LightBlockQueryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.LightBlockQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.LightBlockQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockinfo: (f = msg.getBlockinfo()) && proto.coop.rchain.casper.protocol.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.LightBlockQueryResponse}
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.LightBlockQueryResponse;
  return proto.coop.rchain.casper.protocol.LightBlockQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.LightBlockQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.LightBlockQueryResponse}
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.LightBlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.LightBlockQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.LightBlockQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LightBlockInfo blockInfo = 1;
 * @return {?proto.coop.rchain.casper.protocol.LightBlockInfo}
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.prototype.getBlockinfo = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.LightBlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.LightBlockInfo, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.LightBlockInfo|undefined} value */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.prototype.setBlockinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.LightBlockQueryResponse.prototype.clearBlockinfo = function() {
  this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.LightBlockQueryResponse.prototype.hasBlockinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.VisualizeDagQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.VisualizeDagQuery.displayName = 'proto.coop.rchain.casper.protocol.VisualizeDagQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.VisualizeDagQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.VisualizeDagQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    showjustificationlines: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.VisualizeDagQuery}
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.VisualizeDagQuery;
  return proto.coop.rchain.casper.protocol.VisualizeDagQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.VisualizeDagQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.VisualizeDagQuery}
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowjustificationlines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.VisualizeDagQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.VisualizeDagQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getShowjustificationlines();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool showJustificationLines = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.prototype.getShowjustificationlines = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.coop.rchain.casper.protocol.VisualizeDagQuery.prototype.setShowjustificationlines = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.VisualizeBlocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.displayName = 'proto.coop.rchain.casper.protocol.VisualizeBlocksResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.VisualizeBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.VisualizeBlocksResponse}
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.VisualizeBlocksResponse;
  return proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.VisualizeBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.VisualizeBlocksResponse}
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.VisualizeBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.VisualizeBlocksResponse.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.MachineVerifyQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.MachineVerifyQuery.displayName = 'proto.coop.rchain.casper.protocol.MachineVerifyQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.MachineVerifyQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.MachineVerifyQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.MachineVerifyQuery}
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.MachineVerifyQuery;
  return proto.coop.rchain.casper.protocol.MachineVerifyQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.MachineVerifyQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.MachineVerifyQuery}
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.MachineVerifyQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.MachineVerifyQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.MachineVerifyQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.MachineVerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.MachineVerifyResponse.displayName = 'proto.coop.rchain.casper.protocol.MachineVerifyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.MachineVerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.MachineVerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.MachineVerifyResponse}
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.MachineVerifyResponse;
  return proto.coop.rchain.casper.protocol.MachineVerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.MachineVerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.MachineVerifyResponse}
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.MachineVerifyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.MachineVerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.MachineVerifyResponse.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ListeningNameDataResponse.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ListeningNameDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ListeningNameDataResponse.displayName = 'proto.coop.rchain.casper.protocol.ListeningNameDataResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ListeningNameDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ListeningNameDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockresultsList: jspb.Message.toObjectList(msg.getBlockresultsList(),
    proto.coop.rchain.casper.protocol.DataWithBlockInfo.toObject, includeInstance),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ListeningNameDataResponse}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ListeningNameDataResponse;
  return proto.coop.rchain.casper.protocol.ListeningNameDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ListeningNameDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ListeningNameDataResponse}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.DataWithBlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.DataWithBlockInfo.deserializeBinaryFromReader);
      msg.addBlockresults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ListeningNameDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ListeningNameDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.DataWithBlockInfo.serializeBinaryToWriter
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated DataWithBlockInfo blockResults = 1;
 * @return {!Array<!proto.coop.rchain.casper.protocol.DataWithBlockInfo>}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.getBlockresultsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.DataWithBlockInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.DataWithBlockInfo, 1));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.DataWithBlockInfo>} value */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.setBlockresultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.DataWithBlockInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.DataWithBlockInfo}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.addBlockresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coop.rchain.casper.protocol.DataWithBlockInfo, opt_index);
};


proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.clearBlockresultsList = function() {
  this.setBlockresultsList([]);
};


/**
 * optional int32 length = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.ListeningNameDataResponse.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.displayName = 'proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockresultsList: jspb.Message.toObjectList(msg.getBlockresultsList(),
    proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.toObject, includeInstance),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse;
  return proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.deserializeBinaryFromReader);
      msg.addBlockresults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.serializeBinaryToWriter
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated ContinuationsWithBlockInfo blockResults = 1;
 * @return {!Array<!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo>}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.getBlockresultsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo, 1));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo>} value */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.setBlockresultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.addBlockresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo, opt_index);
};


proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.clearBlockresultsList = function() {
  this.setBlockresultsList([]);
};


/**
 * optional int32 length = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.ListeningNameContinuationResponse.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.displayName = 'proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nameqty: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery;
  return proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNameqty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNameqty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.setUser = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 nameQty = 3;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.getNameqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.PrivateNamePreviewQuery.prototype.setNameqty = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.displayName = 'proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: msg.getIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse;
  return proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.getIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes ids = 1;
 * This is a type-conversion wrapper around `getIdsList()`
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.getIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIdsList()));
};


/**
 * repeated bytes ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.getIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.coop.rchain.casper.protocol.PrivateNamePreviewResponse.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.displayName = 'proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery;
  return proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.displayName = 'proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockinfo: (f = msg.getBlockinfo()) && proto.coop.rchain.casper.protocol.BlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse;
  return proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.BlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.BlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.BlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockInfo blockInfo = 1;
 * @return {?proto.coop.rchain.casper.protocol.BlockInfo}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.prototype.getBlockinfo = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.BlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.BlockInfo, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.BlockInfo|undefined} value */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.prototype.setBlockinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.prototype.clearBlockinfo = function() {
  this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.LastFinalizedBlockResponse.prototype.hasBlockinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.LightBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.LightBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.LightBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.LightBlockInfo.displayName = 'proto.coop.rchain.casper.protocol.LightBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.LightBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.LightBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocksize: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deploycount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tuplespacehash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    faulttolerance: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    mainparenthash: jspb.Message.getFieldWithDefault(msg, 9, ""),
    parentshashlistList: jspb.Message.getRepeatedField(msg, 10),
    sender: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.LightBlockInfo}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.LightBlockInfo;
  return proto.coop.rchain.casper.protocol.LightBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.LightBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.LightBlockInfo}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocksize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeploycount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTuplespacehash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFaulttolerance(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainparenthash(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addParentshashlist(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.LightBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.LightBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocksize();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDeploycount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTuplespacehash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getFaulttolerance();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMainparenthash();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getParentshashlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string blockHash = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockSize = 2;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getBlocksize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setBlocksize = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 blockNumber = 3;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setBlocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 version = 4;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 deployCount = 5;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getDeploycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setDeploycount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string tupleSpaceHash = 6;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getTuplespacehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setTuplespacehash = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 timestamp = 7;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float faultTolerance = 8;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getFaulttolerance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setFaulttolerance = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string mainParentHash = 9;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getMainparenthash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setMainparenthash = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string parentsHashList = 10;
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getParentshashlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setParentshashlistList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.addParentshashlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.clearParentshashlistList = function() {
  this.setParentshashlistList([]);
};


/**
 * optional string sender = 11;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.LightBlockInfo.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockInfo.displayName = 'proto.coop.rchain.casper.protocol.BlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.BlockInfo.repeatedFields_ = [10,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocksize: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deploycount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tuplespacehash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    faulttolerance: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    mainparenthash: jspb.Message.getFieldWithDefault(msg, 9, ""),
    parentshashlistList: jspb.Message.getRepeatedField(msg, 10),
    sender: jspb.Message.getFieldWithDefault(msg, 11, ""),
    shardid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    bondsvalidatorlistList: jspb.Message.getRepeatedField(msg, 13),
    deploycostList: jspb.Message.getRepeatedField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockInfo}
 */
proto.coop.rchain.casper.protocol.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockInfo;
  return proto.coop.rchain.casper.protocol.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockInfo}
 */
proto.coop.rchain.casper.protocol.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocksize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeploycount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTuplespacehash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFaulttolerance(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainparenthash(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addParentshashlist(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addBondsvalidatorlist(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addDeploycost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocksize();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDeploycount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTuplespacehash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getFaulttolerance();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMainparenthash();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getParentshashlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getShardid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBondsvalidatorlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getDeploycostList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
};


/**
 * optional string blockHash = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockSize = 2;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getBlocksize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setBlocksize = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 blockNumber = 3;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setBlocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 version = 4;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 deployCount = 5;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getDeploycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setDeploycount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string tupleSpaceHash = 6;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getTuplespacehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setTuplespacehash = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 timestamp = 7;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float faultTolerance = 8;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getFaulttolerance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setFaulttolerance = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string mainParentHash = 9;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getMainparenthash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setMainparenthash = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string parentsHashList = 10;
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getParentshashlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setParentshashlistList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.addParentshashlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.coop.rchain.casper.protocol.BlockInfo.prototype.clearParentshashlistList = function() {
  this.setParentshashlistList([]);
};


/**
 * optional string sender = 11;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string shardId = 12;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getShardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setShardid = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * repeated string bondsValidatorList = 13;
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getBondsvalidatorlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array<string>} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setBondsvalidatorlistList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.addBondsvalidatorlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.coop.rchain.casper.protocol.BlockInfo.prototype.clearBondsvalidatorlistList = function() {
  this.setBondsvalidatorlistList([]);
};


/**
 * repeated string deployCost = 14;
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.getDeploycostList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/** @param {!Array<string>} value */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.setDeploycostList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.BlockInfo.prototype.addDeploycost = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.coop.rchain.casper.protocol.BlockInfo.prototype.clearDeploycostList = function() {
  this.setDeploycostList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.DataWithBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.DataWithBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.DataWithBlockInfo.displayName = 'proto.coop.rchain.casper.protocol.DataWithBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.DataWithBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.DataWithBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockdataList: jspb.Message.toObjectList(msg.getPostblockdataList(),
    RhoTypes_pb.Par.toObject, includeInstance),
    block: (f = msg.getBlock()) && proto.coop.rchain.casper.protocol.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.DataWithBlockInfo}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.DataWithBlockInfo;
  return proto.coop.rchain.casper.protocol.DataWithBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.DataWithBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.DataWithBlockInfo}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addPostblockdata(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.LightBlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.DataWithBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.DataWithBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostblockdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par postBlockData = 1;
 * @return {!Array<!proto.Par>}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.getPostblockdataList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, RhoTypes_pb.Par, 1));
};


/** @param {!Array<!proto.Par>} value */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.setPostblockdataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.addPostblockdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Par, opt_index);
};


proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.clearPostblockdataList = function() {
  this.setPostblockdataList([]);
};


/**
 * optional LightBlockInfo block = 2;
 * @return {?proto.coop.rchain.casper.protocol.LightBlockInfo}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.getBlock = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.LightBlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.LightBlockInfo, 2));
};


/** @param {?proto.coop.rchain.casper.protocol.LightBlockInfo|undefined} value */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.DataWithBlockInfo.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.displayName = 'proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockcontinuationsList: jspb.Message.toObjectList(msg.getPostblockcontinuationsList(),
    proto.coop.rchain.casper.protocol.WaitingContinuationInfo.toObject, includeInstance),
    block: (f = msg.getBlock()) && proto.coop.rchain.casper.protocol.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo;
  return proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.WaitingContinuationInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.WaitingContinuationInfo.deserializeBinaryFromReader);
      msg.addPostblockcontinuations(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.LightBlockInfo;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostblockcontinuationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.WaitingContinuationInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WaitingContinuationInfo postBlockContinuations = 1;
 * @return {!Array<!proto.coop.rchain.casper.protocol.WaitingContinuationInfo>}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.getPostblockcontinuationsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.WaitingContinuationInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.WaitingContinuationInfo, 1));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.WaitingContinuationInfo>} value */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.setPostblockcontinuationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.addPostblockcontinuations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coop.rchain.casper.protocol.WaitingContinuationInfo, opt_index);
};


proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.clearPostblockcontinuationsList = function() {
  this.setPostblockcontinuationsList([]);
};


/**
 * optional LightBlockInfo block = 2;
 * @return {?proto.coop.rchain.casper.protocol.LightBlockInfo}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.getBlock = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.LightBlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.LightBlockInfo, 2));
};


/** @param {?proto.coop.rchain.casper.protocol.LightBlockInfo|undefined} value */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ContinuationsWithBlockInfo.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.WaitingContinuationInfo.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.WaitingContinuationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.WaitingContinuationInfo.displayName = 'proto.coop.rchain.casper.protocol.WaitingContinuationInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.WaitingContinuationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockpatternsList: jspb.Message.toObjectList(msg.getPostblockpatternsList(),
    RhoTypes_pb.BindPattern.toObject, includeInstance),
    postblockcontinuation: (f = msg.getPostblockcontinuation()) && RhoTypes_pb.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.WaitingContinuationInfo;
  return proto.coop.rchain.casper.protocol.WaitingContinuationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.BindPattern;
      reader.readMessage(value,RhoTypes_pb.BindPattern.deserializeBinaryFromReader);
      msg.addPostblockpatterns(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setPostblockcontinuation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.WaitingContinuationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.WaitingContinuationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostblockpatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.BindPattern.serializeBinaryToWriter
    );
  }
  f = message.getPostblockcontinuation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BindPattern postBlockPatterns = 1;
 * @return {!Array<!proto.BindPattern>}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.getPostblockpatternsList = function() {
  return /** @type{!Array<!proto.BindPattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, RhoTypes_pb.BindPattern, 1));
};


/** @param {!Array<!proto.BindPattern>} value */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.setPostblockpatternsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BindPattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BindPattern}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.addPostblockpatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BindPattern, opt_index);
};


proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.clearPostblockpatternsList = function() {
  this.setPostblockpatternsList([]);
};


/**
 * optional Par postBlockContinuation = 2;
 * @return {?proto.Par}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.getPostblockcontinuation = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.getWrapperField(this, RhoTypes_pb.Par, 2));
};


/** @param {?proto.Par|undefined} value */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.setPostblockcontinuation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.clearPostblockcontinuation = function() {
  this.setPostblockcontinuation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.WaitingContinuationInfo.prototype.hasPostblockcontinuation = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.coop.rchain.casper.protocol);
