/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var CasperMessage_pb = require('./CasperMessage_pb.js');
goog.object.extend(proto, CasperMessage_pb);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Ack', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Chunk', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.ChunkData', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.ChunkHeader', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Disconnect', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Header', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Heartbeat', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.HeartbeatResponse', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.InternalServerError', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Node', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Packet', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.Protocol', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.ProtocolHandshake', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.TLRequest', null, global);
goog.exportSymbol('proto.coop.rchain.comm.protocol.routing.TLResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Node.displayName = 'proto.coop.rchain.comm.protocol.routing.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    host: msg.getHost_asB64(),
    tcpPort: jspb.Message.getFieldWithDefault(msg, 3, 0),
    udpPort: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Node}
 */
proto.coop.rchain.comm.protocol.routing.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Node;
  return proto.coop.rchain.comm.protocol.routing.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Node}
 */
proto.coop.rchain.comm.protocol.routing.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUdpPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHost_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTcpPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUdpPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.Node.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes host = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getHost = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes host = 2;
 * This is a type-conversion wrapper around `getHost()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getHost_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHost()));
};


/**
 * optional bytes host = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHost()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getHost_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHost()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.Node.prototype.setHost = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 tcp_port = 3;
 * @return {number}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getTcpPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coop.rchain.comm.protocol.routing.Node.prototype.setTcpPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 udp_port = 4;
 * @return {number}
 */
proto.coop.rchain.comm.protocol.routing.Node.prototype.getUdpPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.comm.protocol.routing.Node.prototype.setUdpPort = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Header.displayName = 'proto.coop.rchain.comm.protocol.routing.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = msg.getSender()) && proto.coop.rchain.comm.protocol.routing.Node.toObject(includeInstance, f),
    networkid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Header}
 */
proto.coop.rchain.comm.protocol.routing.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Header;
  return proto.coop.rchain.comm.protocol.routing.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Header}
 */
proto.coop.rchain.comm.protocol.routing.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.Node;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Node.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.Node.serializeBinaryToWriter
    );
  }
  f = message.getNetworkid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Node sender = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.Node}
 */
proto.coop.rchain.comm.protocol.routing.Header.prototype.getSender = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Node} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Node, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Node|undefined} value */
proto.coop.rchain.comm.protocol.routing.Header.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.comm.protocol.routing.Header.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Header.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string networkId = 2;
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.Header.prototype.getNetworkid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.comm.protocol.routing.Header.prototype.setNetworkid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Heartbeat.displayName = 'proto.coop.rchain.comm.protocol.routing.Heartbeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Heartbeat}
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Heartbeat;
  return proto.coop.rchain.comm.protocol.routing.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Heartbeat}
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.HeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.displayName = 'proto.coop.rchain.comm.protocol.routing.HeartbeatResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.HeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.HeartbeatResponse}
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.HeartbeatResponse;
  return proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.HeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.HeartbeatResponse}
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.HeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.HeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.ProtocolHandshake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.displayName = 'proto.coop.rchain.comm.protocol.routing.ProtocolHandshake';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshake}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.ProtocolHandshake;
  return proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshake}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.displayName = 'proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse;
  return proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Packet.displayName = 'proto.coop.rchain.comm.protocol.routing.Packet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Packet}
 */
proto.coop.rchain.comm.protocol.routing.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Packet;
  return proto.coop.rchain.comm.protocol.routing.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Packet}
 */
proto.coop.rchain.comm.protocol.routing.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string typeId = 1;
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.getTypeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.setTypeid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.Packet.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Disconnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Disconnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Disconnect.displayName = 'proto.coop.rchain.comm.protocol.routing.Disconnect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Disconnect.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Disconnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Disconnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Disconnect.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Disconnect}
 */
proto.coop.rchain.comm.protocol.routing.Disconnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Disconnect;
  return proto.coop.rchain.comm.protocol.routing.Disconnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Disconnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Disconnect}
 */
proto.coop.rchain.comm.protocol.routing.Disconnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Disconnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Disconnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Disconnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Disconnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Protocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Protocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Protocol.displayName = 'proto.coop.rchain.comm.protocol.routing.Protocol';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.MessageCase = {
  MESSAGE_NOT_SET: 0,
  HEARTBEAT: 2,
  PROTOCOL_HANDSHAKE: 3,
  PROTOCOL_HANDSHAKE_RESPONSE: 4,
  PACKET: 5,
  DISCONNECT: 6
};

/**
 * @return {proto.coop.rchain.comm.protocol.routing.Protocol.MessageCase}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getMessageCase = function() {
  return /** @type {proto.coop.rchain.comm.protocol.routing.Protocol.MessageCase} */(jspb.Message.computeOneofCase(this, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Protocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Protocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Protocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.coop.rchain.comm.protocol.routing.Header.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.coop.rchain.comm.protocol.routing.Heartbeat.toObject(includeInstance, f),
    protocolHandshake: (f = msg.getProtocolHandshake()) && proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.toObject(includeInstance, f),
    protocolHandshakeResponse: (f = msg.getProtocolHandshakeResponse()) && proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.toObject(includeInstance, f),
    packet: (f = msg.getPacket()) && proto.coop.rchain.comm.protocol.routing.Packet.toObject(includeInstance, f),
    disconnect: (f = msg.getDisconnect()) && proto.coop.rchain.comm.protocol.routing.Disconnect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Protocol}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Protocol;
  return proto.coop.rchain.comm.protocol.routing.Protocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Protocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Protocol}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.Header;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.coop.rchain.comm.protocol.routing.Heartbeat;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 3:
      var value = new proto.coop.rchain.comm.protocol.routing.ProtocolHandshake;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.deserializeBinaryFromReader);
      msg.setProtocolHandshake(value);
      break;
    case 4:
      var value = new proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.deserializeBinaryFromReader);
      msg.setProtocolHandshakeResponse(value);
      break;
    case 5:
      var value = new proto.coop.rchain.comm.protocol.routing.Packet;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 6:
      var value = new proto.coop.rchain.comm.protocol.routing.Disconnect;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Disconnect.deserializeBinaryFromReader);
      msg.setDisconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Protocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Protocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Protocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.Header.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.comm.protocol.routing.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getProtocolHandshake();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.coop.rchain.comm.protocol.routing.ProtocolHandshake.serializeBinaryToWriter
    );
  }
  f = message.getProtocolHandshakeResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse.serializeBinaryToWriter
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.coop.rchain.comm.protocol.routing.Packet.serializeBinaryToWriter
    );
  }
  f = message.getDisconnect();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.coop.rchain.comm.protocol.routing.Disconnect.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.Header}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getHeader = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Header} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Header, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Header|undefined} value */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.comm.protocol.routing.Protocol.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Heartbeat heartbeat = 2;
 * @return {?proto.coop.rchain.comm.protocol.routing.Heartbeat}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getHeartbeat = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Heartbeat, 2));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Heartbeat|undefined} value */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.setHeartbeat = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Protocol.prototype.clearHeartbeat = function() {
  this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProtocolHandshake protocol_handshake = 3;
 * @return {?proto.coop.rchain.comm.protocol.routing.ProtocolHandshake}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getProtocolHandshake = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.ProtocolHandshake} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.ProtocolHandshake, 3));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.ProtocolHandshake|undefined} value */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.setProtocolHandshake = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Protocol.prototype.clearProtocolHandshake = function() {
  this.setProtocolHandshake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.hasProtocolHandshake = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProtocolHandshakeResponse protocol_handshake_response = 4;
 * @return {?proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getProtocolHandshakeResponse = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse, 4));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.ProtocolHandshakeResponse|undefined} value */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.setProtocolHandshakeResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Protocol.prototype.clearProtocolHandshakeResponse = function() {
  this.setProtocolHandshakeResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.hasProtocolHandshakeResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Packet packet = 5;
 * @return {?proto.coop.rchain.comm.protocol.routing.Packet}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getPacket = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Packet} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Packet, 5));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Packet|undefined} value */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.setPacket = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Protocol.prototype.clearPacket = function() {
  this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Disconnect disconnect = 6;
 * @return {?proto.coop.rchain.comm.protocol.routing.Disconnect}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.getDisconnect = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Disconnect} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Disconnect, 6));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Disconnect|undefined} value */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.setDisconnect = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.coop.rchain.comm.protocol.routing.Protocol.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Protocol.prototype.clearDisconnect = function() {
  this.setDisconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Protocol.prototype.hasDisconnect = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.TLRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.TLRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.TLRequest.displayName = 'proto.coop.rchain.comm.protocol.routing.TLRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.TLRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.TLRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: (f = msg.getProtocol()) && proto.coop.rchain.comm.protocol.routing.Protocol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.TLRequest}
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.TLRequest;
  return proto.coop.rchain.comm.protocol.routing.TLRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.TLRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.TLRequest}
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.Protocol;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Protocol.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.TLRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.TLRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.Protocol.serializeBinaryToWriter
    );
  }
};


/**
 * optional Protocol protocol = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.Protocol}
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.prototype.getProtocol = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Protocol} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Protocol, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Protocol|undefined} value */
proto.coop.rchain.comm.protocol.routing.TLRequest.prototype.setProtocol = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.comm.protocol.routing.TLRequest.prototype.clearProtocol = function() {
  this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.TLRequest.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.InternalServerError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.InternalServerError.displayName = 'proto.coop.rchain.comm.protocol.routing.InternalServerError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.InternalServerError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.InternalServerError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: msg.getError_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.InternalServerError}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.InternalServerError;
  return proto.coop.rchain.comm.protocol.routing.InternalServerError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.InternalServerError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.InternalServerError}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.InternalServerError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.InternalServerError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes error = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.prototype.getError = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes error = 1;
 * This is a type-conversion wrapper around `getError()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.prototype.getError_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getError()));
};


/**
 * optional bytes error = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getError()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.InternalServerError.prototype.getError_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getError()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.InternalServerError.prototype.setError = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Ack.displayName = 'proto.coop.rchain.comm.protocol.routing.Ack';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.coop.rchain.comm.protocol.routing.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Ack}
 */
proto.coop.rchain.comm.protocol.routing.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Ack;
  return proto.coop.rchain.comm.protocol.routing.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Ack}
 */
proto.coop.rchain.comm.protocol.routing.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.Header;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.Header}
 */
proto.coop.rchain.comm.protocol.routing.Ack.prototype.getHeader = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Header} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Header, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Header|undefined} value */
proto.coop.rchain.comm.protocol.routing.Ack.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.comm.protocol.routing.Ack.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Ack.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.TLResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.coop.rchain.comm.protocol.routing.TLResponse.oneofGroups_);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.TLResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.TLResponse.displayName = 'proto.coop.rchain.comm.protocol.routing.TLResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  ACK: 1,
  INTERNALSERVERERROR: 2
};

/**
 * @return {proto.coop.rchain.comm.protocol.routing.TLResponse.PayloadCase}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.getPayloadCase = function() {
  return /** @type {proto.coop.rchain.comm.protocol.routing.TLResponse.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.coop.rchain.comm.protocol.routing.TLResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.TLResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.TLResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.coop.rchain.comm.protocol.routing.Ack.toObject(includeInstance, f),
    internalservererror: (f = msg.getInternalservererror()) && proto.coop.rchain.comm.protocol.routing.InternalServerError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.TLResponse}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.TLResponse;
  return proto.coop.rchain.comm.protocol.routing.TLResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.TLResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.TLResponse}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.Ack;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.coop.rchain.comm.protocol.routing.InternalServerError;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.InternalServerError.deserializeBinaryFromReader);
      msg.setInternalservererror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.TLResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.TLResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.Ack.serializeBinaryToWriter
    );
  }
  f = message.getInternalservererror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.comm.protocol.routing.InternalServerError.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ack ack = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.Ack}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.getAck = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Ack} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Ack, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Ack|undefined} value */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.setAck = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.coop.rchain.comm.protocol.routing.TLResponse.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.clearAck = function() {
  this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InternalServerError internalServerError = 2;
 * @return {?proto.coop.rchain.comm.protocol.routing.InternalServerError}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.getInternalservererror = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.InternalServerError} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.InternalServerError, 2));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.InternalServerError|undefined} value */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.setInternalservererror = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.coop.rchain.comm.protocol.routing.TLResponse.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.clearInternalservererror = function() {
  this.setInternalservererror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.TLResponse.prototype.hasInternalservererror = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.ChunkHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.ChunkHeader.displayName = 'proto.coop.rchain.comm.protocol.routing.ChunkHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.ChunkHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.ChunkHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = msg.getSender()) && proto.coop.rchain.comm.protocol.routing.Node.toObject(includeInstance, f),
    typeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    compressed: jspb.Message.getFieldWithDefault(msg, 3, false),
    contentlength: jspb.Message.getFieldWithDefault(msg, 4, 0),
    networkid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.ChunkHeader}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.ChunkHeader;
  return proto.coop.rchain.comm.protocol.routing.ChunkHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.ChunkHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.ChunkHeader}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.Node;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.Node.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompressed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContentlength(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.ChunkHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.ChunkHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.Node.serializeBinaryToWriter
    );
  }
  f = message.getTypeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompressed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getContentlength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNetworkid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Node sender = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.Node}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.getSender = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.Node} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.Node, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.Node|undefined} value */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string typeId = 2;
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.getTypeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.setTypeid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool compressed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.getCompressed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.setCompressed = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 contentLength = 4;
 * @return {number}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.getContentlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.setContentlength = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string networkId = 5;
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.getNetworkid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.coop.rchain.comm.protocol.routing.ChunkHeader.prototype.setNetworkid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.ChunkData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.ChunkData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.ChunkData.displayName = 'proto.coop.rchain.comm.protocol.routing.ChunkData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.ChunkData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.ChunkData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentdata: msg.getContentdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.ChunkData}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.ChunkData;
  return proto.coop.rchain.comm.protocol.routing.ChunkData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.ChunkData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.ChunkData}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContentdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.ChunkData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.ChunkData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contentData = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.prototype.getContentdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contentData = 1;
 * This is a type-conversion wrapper around `getContentdata()`
 * @return {string}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.prototype.getContentdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContentdata()));
};


/**
 * optional bytes contentData = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContentdata()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.ChunkData.prototype.getContentdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContentdata()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.comm.protocol.routing.ChunkData.prototype.setContentdata = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.comm.protocol.routing.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.coop.rchain.comm.protocol.routing.Chunk.oneofGroups_);
};
goog.inherits(proto.coop.rchain.comm.protocol.routing.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.comm.protocol.routing.Chunk.displayName = 'proto.coop.rchain.comm.protocol.routing.Chunk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.coop.rchain.comm.protocol.routing.Chunk.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.ContentCase = {
  CONTENT_NOT_SET: 0,
  HEADER: 1,
  DATA: 2
};

/**
 * @return {proto.coop.rchain.comm.protocol.routing.Chunk.ContentCase}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.getContentCase = function() {
  return /** @type {proto.coop.rchain.comm.protocol.routing.Chunk.ContentCase} */(jspb.Message.computeOneofCase(this, proto.coop.rchain.comm.protocol.routing.Chunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.comm.protocol.routing.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.comm.protocol.routing.Chunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.coop.rchain.comm.protocol.routing.ChunkHeader.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.coop.rchain.comm.protocol.routing.ChunkData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.comm.protocol.routing.Chunk}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.comm.protocol.routing.Chunk;
  return proto.coop.rchain.comm.protocol.routing.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.comm.protocol.routing.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.comm.protocol.routing.Chunk}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.comm.protocol.routing.ChunkHeader;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.ChunkHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.coop.rchain.comm.protocol.routing.ChunkData;
      reader.readMessage(value,proto.coop.rchain.comm.protocol.routing.ChunkData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.comm.protocol.routing.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.comm.protocol.routing.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.comm.protocol.routing.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.comm.protocol.routing.ChunkHeader.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.comm.protocol.routing.ChunkData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChunkHeader header = 1;
 * @return {?proto.coop.rchain.comm.protocol.routing.ChunkHeader}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.getHeader = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.ChunkHeader} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.ChunkHeader, 1));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.ChunkHeader|undefined} value */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.setHeader = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.coop.rchain.comm.protocol.routing.Chunk.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Chunk.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChunkData data = 2;
 * @return {?proto.coop.rchain.comm.protocol.routing.ChunkData}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.getData = function() {
  return /** @type{?proto.coop.rchain.comm.protocol.routing.ChunkData} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.comm.protocol.routing.ChunkData, 2));
};


/** @param {?proto.coop.rchain.comm.protocol.routing.ChunkData|undefined} value */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.setData = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.coop.rchain.comm.protocol.routing.Chunk.oneofGroups_[0], value);
};


proto.coop.rchain.comm.protocol.routing.Chunk.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.comm.protocol.routing.Chunk.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.coop.rchain.comm.protocol.routing);
