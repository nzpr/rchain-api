/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var RhoTypes_pb = require('./RhoTypes_pb.js');
goog.object.extend(proto, RhoTypes_pb);
var Either_pb = require('./Either_pb.js');
goog.object.extend(proto, Either_pb);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ApprovedBlock', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ApprovedBlockCandidate', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ApprovedBlockRequest', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockApproval', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockMessage', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockMetadataInternal', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.BlockRequest', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.Body', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.Bond', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.CommEvent', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ConsumeEvent', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.DeployData', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.Event', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ForkChoiceTipRequest', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.HasBlock', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.HasBlockRequest', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.Header', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.Justification', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ProcessedDeploy', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.ProduceEvent', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.RChainState', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.Signature', null, global);
goog.exportSymbol('proto.coop.rchain.casper.protocol.UnapprovedBlock', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.HasBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.HasBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.HasBlockRequest.displayName = 'proto.coop.rchain.casper.protocol.HasBlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.HasBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.HasBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.HasBlockRequest}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.HasBlockRequest;
  return proto.coop.rchain.casper.protocol.HasBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.HasBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.HasBlockRequest}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.HasBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.HasBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.HasBlockRequest.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.HasBlockRequest.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.HasBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.HasBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.HasBlock.displayName = 'proto.coop.rchain.casper.protocol.HasBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.HasBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.HasBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.HasBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.HasBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.HasBlock}
 */
proto.coop.rchain.casper.protocol.HasBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.HasBlock;
  return proto.coop.rchain.casper.protocol.HasBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.HasBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.HasBlock}
 */
proto.coop.rchain.casper.protocol.HasBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.HasBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.HasBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.HasBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.HasBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.HasBlock.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.HasBlock.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.HasBlock.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.HasBlock.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockRequest.displayName = 'proto.coop.rchain.casper.protocol.BlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockRequest}
 */
proto.coop.rchain.casper.protocol.BlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockRequest;
  return proto.coop.rchain.casper.protocol.BlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockRequest}
 */
proto.coop.rchain.casper.protocol.BlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockRequest.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockRequest.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockRequest.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockRequest.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ForkChoiceTipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.displayName = 'proto.coop.rchain.casper.protocol.ForkChoiceTipRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ForkChoiceTipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ForkChoiceTipRequest}
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ForkChoiceTipRequest;
  return proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ForkChoiceTipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ForkChoiceTipRequest}
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ForkChoiceTipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ForkChoiceTipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ApprovedBlockCandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.displayName = 'proto.coop.rchain.casper.protocol.ApprovedBlockCandidate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlockCandidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.coop.rchain.casper.protocol.BlockMessage.toObject(includeInstance, f),
    requiredsigs: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ApprovedBlockCandidate}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ApprovedBlockCandidate;
  return proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlockCandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ApprovedBlockCandidate}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.BlockMessage;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.BlockMessage.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequiredsigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlockCandidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.BlockMessage.serializeBinaryToWriter
    );
  }
  f = message.getRequiredsigs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional BlockMessage block = 1;
 * @return {?proto.coop.rchain.casper.protocol.BlockMessage}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.getBlock = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.BlockMessage} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.BlockMessage, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.BlockMessage|undefined} value */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 requiredSigs = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.getRequiredsigs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.prototype.setRequiredsigs = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.UnapprovedBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.UnapprovedBlock.displayName = 'proto.coop.rchain.casper.protocol.UnapprovedBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.UnapprovedBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.UnapprovedBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.UnapprovedBlock}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.UnapprovedBlock;
  return proto.coop.rchain.casper.protocol.UnapprovedBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.UnapprovedBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.UnapprovedBlock}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.ApprovedBlockCandidate;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.UnapprovedBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.UnapprovedBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional ApprovedBlockCandidate candidate = 1;
 * @return {?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.getCandidate = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.ApprovedBlockCandidate, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate|undefined} value */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.setCandidate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.clearCandidate = function() {
  this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 duration = 3;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.UnapprovedBlock.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.Signature.displayName = 'proto.coop.rchain.casper.protocol.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.getPublickey_asB64(),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.Signature}
 */
proto.coop.rchain.casper.protocol.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.Signature;
  return proto.coop.rchain.casper.protocol.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.Signature}
 */
proto.coop.rchain.casper.protocol.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Signature.prototype.setPublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.Signature.prototype.setAlgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Signature.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Signature.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockApproval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockApproval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockApproval.displayName = 'proto.coop.rchain.casper.protocol.BlockApproval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockApproval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockApproval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockApproval.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.toObject(includeInstance, f),
    sig: (f = msg.getSig()) && proto.coop.rchain.casper.protocol.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockApproval}
 */
proto.coop.rchain.casper.protocol.BlockApproval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockApproval;
  return proto.coop.rchain.casper.protocol.BlockApproval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockApproval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockApproval}
 */
proto.coop.rchain.casper.protocol.BlockApproval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.ApprovedBlockCandidate;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.Signature;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Signature.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockApproval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockApproval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockApproval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.serializeBinaryToWriter
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApprovedBlockCandidate candidate = 1;
 * @return {?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate}
 */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.getCandidate = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.ApprovedBlockCandidate, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate|undefined} value */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.setCandidate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.BlockApproval.prototype.clearCandidate = function() {
  this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Signature sig = 2;
 * @return {?proto.coop.rchain.casper.protocol.Signature}
 */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.getSig = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.Signature} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.Signature, 2));
};


/** @param {?proto.coop.rchain.casper.protocol.Signature|undefined} value */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.setSig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.BlockApproval.prototype.clearSig = function() {
  this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.BlockApproval.prototype.hasSig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ApprovedBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ApprovedBlock.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ApprovedBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ApprovedBlock.displayName = 'proto.coop.rchain.casper.protocol.ApprovedBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ApprovedBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.toObject(includeInstance, f),
    sigsList: jspb.Message.toObjectList(msg.getSigsList(),
    proto.coop.rchain.casper.protocol.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ApprovedBlock}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ApprovedBlock;
  return proto.coop.rchain.casper.protocol.ApprovedBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ApprovedBlock}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.ApprovedBlockCandidate;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.Signature;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Signature.deserializeBinaryFromReader);
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ApprovedBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.ApprovedBlockCandidate.serializeBinaryToWriter
    );
  }
  f = message.getSigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApprovedBlockCandidate candidate = 1;
 * @return {?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.getCandidate = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.ApprovedBlockCandidate, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.ApprovedBlockCandidate|undefined} value */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.setCandidate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.clearCandidate = function() {
  this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Signature sigs = 2;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Signature>}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.getSigsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Signature, 2));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Signature>} value */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.setSigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Signature}
 */
proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.addSigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.coop.rchain.casper.protocol.Signature, opt_index);
};


proto.coop.rchain.casper.protocol.ApprovedBlock.prototype.clearSigsList = function() {
  this.setSigsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ApprovedBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ApprovedBlockRequest.displayName = 'proto.coop.rchain.casper.protocol.ApprovedBlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ApprovedBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ApprovedBlockRequest}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ApprovedBlockRequest;
  return proto.coop.rchain.casper.protocol.ApprovedBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ApprovedBlockRequest}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ApprovedBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ApprovedBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.ApprovedBlockRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.displayName = 'proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeidentifer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable}
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable;
  return proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable}
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeidentifer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeidentifer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nodeIdentifer = 2;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.prototype.getNodeidentifer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.NoApprovedBlockAvailable.prototype.setNodeidentifer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.BlockMessage.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockMessage.displayName = 'proto.coop.rchain.casper.protocol.BlockMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.BlockMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.getBlockhash_asB64(),
    header: (f = msg.getHeader()) && proto.coop.rchain.casper.protocol.Header.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.coop.rchain.casper.protocol.Body.toObject(includeInstance, f),
    justificationsList: jspb.Message.toObjectList(msg.getJustificationsList(),
    proto.coop.rchain.casper.protocol.Justification.toObject, includeInstance),
    sender: msg.getSender_asB64(),
    seqnum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sig: msg.getSig_asB64(),
    sigalgorithm: jspb.Message.getFieldWithDefault(msg, 8, ""),
    shardid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    extrabytes: msg.getExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockMessage}
 */
proto.coop.rchain.casper.protocol.BlockMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockMessage;
  return proto.coop.rchain.casper.protocol.BlockMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockMessage}
 */
proto.coop.rchain.casper.protocol.BlockMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.Header;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.coop.rchain.casper.protocol.Body;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 4:
      var value = new proto.coop.rchain.casper.protocol.Justification;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Justification.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardid(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.Header.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.coop.rchain.casper.protocol.Body.serializeBinaryToWriter
    );
  }
  f = message.getJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.coop.rchain.casper.protocol.Justification.serializeBinaryToWriter
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getShardid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Header header = 2;
 * @return {?proto.coop.rchain.casper.protocol.Header}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getHeader = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.Header} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.Header, 2));
};


/** @param {?proto.coop.rchain.casper.protocol.Header|undefined} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.BlockMessage.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Body body = 3;
 * @return {?proto.coop.rchain.casper.protocol.Body}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getBody = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.Body} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.Body, 3));
};


/** @param {?proto.coop.rchain.casper.protocol.Body|undefined} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.coop.rchain.casper.protocol.BlockMessage.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Justification justifications = 4;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Justification>}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getJustificationsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Justification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Justification, 4));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Justification>} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setJustificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Justification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Justification}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.coop.rchain.casper.protocol.Justification, opt_index);
};


proto.coop.rchain.casper.protocol.BlockMessage.prototype.clearJustificationsList = function() {
  this.setJustificationsList([]);
};


/**
 * optional bytes sender = 5;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sender = 5;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setSender = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int32 seqNum = 6;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes sig = 7;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes sig = 7;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string sigAlgorithm = 8;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setSigalgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string shardId = 9;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getShardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setShardid = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes extraBytes = 10;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getExtrabytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes extraBytes = 10;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockMessage.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.BlockMetadataInternal.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.BlockMetadataInternal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.BlockMetadataInternal.displayName = 'proto.coop.rchain.casper.protocol.BlockMetadataInternal';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.repeatedFields_ = [2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.BlockMetadataInternal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.BlockMetadataInternal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.getBlockhash_asB64(),
    parentsList: msg.getParentsList_asB64(),
    sender: msg.getSender_asB64(),
    justificationsList: jspb.Message.toObjectList(msg.getJustificationsList(),
    proto.coop.rchain.casper.protocol.Justification.toObject, includeInstance),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.coop.rchain.casper.protocol.Bond.toObject, includeInstance),
    blocknum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seqnum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    invalid: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.BlockMetadataInternal}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.BlockMetadataInternal;
  return proto.coop.rchain.casper.protocol.BlockMetadataInternal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.BlockMetadataInternal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.BlockMetadataInternal}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParents(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 4:
      var value = new proto.coop.rchain.casper.protocol.Justification;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Justification.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 5:
      var value = new proto.coop.rchain.casper.protocol.Bond;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Bond.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInvalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.BlockMetadataInternal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.BlockMetadataInternal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.coop.rchain.casper.protocol.Justification.serializeBinaryToWriter
    );
  }
  f = message.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.coop.rchain.casper.protocol.Bond.serializeBinaryToWriter
    );
  }
  f = message.getBlocknum();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInvalid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes parents = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getParentsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes parents = 2;
 * This is a type-conversion wrapper around `getParentsList()`
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getParentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentsList()));
};


/**
 * repeated bytes parents = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getParentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setParentsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.addParents = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.clearParentsList = function() {
  this.setParentsList([]);
};


/**
 * optional bytes sender = 3;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender = 3;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setSender = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Justification justifications = 4;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Justification>}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getJustificationsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Justification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Justification, 4));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Justification>} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setJustificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Justification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Justification}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.coop.rchain.casper.protocol.Justification, opt_index);
};


proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.clearJustificationsList = function() {
  this.setJustificationsList([]);
};


/**
 * repeated Bond bonds = 5;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Bond>}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getBondsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Bond>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Bond, 5));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Bond>} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Bond=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Bond}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.coop.rchain.casper.protocol.Bond, opt_index);
};


proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.clearBondsList = function() {
  this.setBondsList([]);
};


/**
 * optional int64 blockNum = 6;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getBlocknum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setBlocknum = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 seqNum = 7;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool invalid = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.getInvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.coop.rchain.casper.protocol.BlockMetadataInternal.prototype.setInvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.Header.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.Header.displayName = 'proto.coop.rchain.casper.protocol.Header';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.Header.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentshashlistList: msg.getParentshashlistList_asB64(),
    poststatehash: msg.getPoststatehash_asB64(),
    deployshash: msg.getDeployshash_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    version: jspb.Message.getFieldWithDefault(msg, 6, 0),
    deploycount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    extrabytes: msg.getExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.Header}
 */
proto.coop.rchain.casper.protocol.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.Header;
  return proto.coop.rchain.casper.protocol.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.Header}
 */
proto.coop.rchain.casper.protocol.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParentshashlist(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoststatehash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployshash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeploycount(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentshashlistList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getPoststatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDeployshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getDeploycount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * repeated bytes parentsHashList = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getParentshashlistList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes parentsHashList = 1;
 * This is a type-conversion wrapper around `getParentshashlistList()`
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getParentshashlistList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentshashlistList()));
};


/**
 * repeated bytes parentsHashList = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentshashlistList()`
 * @return {!Array<!Uint8Array>}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getParentshashlistList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentshashlistList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.coop.rchain.casper.protocol.Header.prototype.setParentshashlistList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.Header.prototype.addParentshashlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.coop.rchain.casper.protocol.Header.prototype.clearParentshashlistList = function() {
  this.setParentshashlistList([]);
};


/**
 * optional bytes postStateHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getPoststatehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes postStateHash = 2;
 * This is a type-conversion wrapper around `getPoststatehash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getPoststatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPoststatehash()));
};


/**
 * optional bytes postStateHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPoststatehash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getPoststatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPoststatehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Header.prototype.setPoststatehash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes deploysHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getDeployshash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes deploysHash = 3;
 * This is a type-conversion wrapper around `getDeployshash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getDeployshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployshash()));
};


/**
 * optional bytes deploysHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployshash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getDeployshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployshash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Header.prototype.setDeployshash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.Header.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 version = 6;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.Header.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 deployCount = 7;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getDeploycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.Header.prototype.setDeploycount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes extraBytes = 8;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getExtrabytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes extraBytes = 8;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Header.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Header.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.DeployData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.DeployData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.DeployData.displayName = 'proto.coop.rchain.casper.protocol.DeployData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.DeployData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.DeployData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DeployData.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployer: msg.getDeployer_asB64(),
    term: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sig: msg.getSig_asB64(),
    sigalgorithm: jspb.Message.getFieldWithDefault(msg, 5, ""),
    phloprice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    phlolimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    validafterblocknumber: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.DeployData}
 */
proto.coop.rchain.casper.protocol.DeployData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.DeployData;
  return proto.coop.rchain.casper.protocol.DeployData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.DeployData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.DeployData}
 */
proto.coop.rchain.casper.protocol.DeployData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhloprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhlolimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidafterblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.DeployData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.DeployData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.DeployData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeployer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTerm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPhloprice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPhlolimit();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getValidafterblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional bytes deployer = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getDeployer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deployer = 1;
 * This is a type-conversion wrapper around `getDeployer()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getDeployer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployer()));
};


/**
 * optional bytes deployer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployer()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getDeployer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployer()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setDeployer = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string term = 2;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setTerm = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes sig = 4;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sig = 4;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setSigalgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 phloPrice = 7;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getPhloprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setPhloprice = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 phloLimit = 8;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getPhlolimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setPhlolimit = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 validAfterBlockNumber = 10;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.DeployData.prototype.getValidafterblocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.DeployData.prototype.setValidafterblocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ProcessedDeploy.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ProcessedDeploy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ProcessedDeploy.displayName = 'proto.coop.rchain.casper.protocol.ProcessedDeploy';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ProcessedDeploy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ProcessedDeploy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploy: (f = msg.getDeploy()) && proto.coop.rchain.casper.protocol.DeployData.toObject(includeInstance, f),
    cost: (f = msg.getCost()) && RhoTypes_pb.PCost.toObject(includeInstance, f),
    deploylogList: jspb.Message.toObjectList(msg.getDeploylogList(),
    proto.coop.rchain.casper.protocol.Event.toObject, includeInstance),
    paymentlogList: jspb.Message.toObjectList(msg.getPaymentlogList(),
    proto.coop.rchain.casper.protocol.Event.toObject, includeInstance),
    errored: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ProcessedDeploy}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ProcessedDeploy;
  return proto.coop.rchain.casper.protocol.ProcessedDeploy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ProcessedDeploy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ProcessedDeploy}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.DeployData;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.DeployData.deserializeBinaryFromReader);
      msg.setDeploy(value);
      break;
    case 2:
      var value = new RhoTypes_pb.PCost;
      reader.readMessage(value,RhoTypes_pb.PCost.deserializeBinaryFromReader);
      msg.setCost(value);
      break;
    case 3:
      var value = new proto.coop.rchain.casper.protocol.Event;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Event.deserializeBinaryFromReader);
      msg.addDeploylog(value);
      break;
    case 4:
      var value = new proto.coop.rchain.casper.protocol.Event;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Event.deserializeBinaryFromReader);
      msg.addPaymentlog(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErrored(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ProcessedDeploy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ProcessedDeploy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeploy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.DeployData.serializeBinaryToWriter
    );
  }
  f = message.getCost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.PCost.serializeBinaryToWriter
    );
  }
  f = message.getDeploylogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.coop.rchain.casper.protocol.Event.serializeBinaryToWriter
    );
  }
  f = message.getPaymentlogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.coop.rchain.casper.protocol.Event.serializeBinaryToWriter
    );
  }
  f = message.getErrored();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional DeployData deploy = 1;
 * @return {?proto.coop.rchain.casper.protocol.DeployData}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.getDeploy = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.DeployData} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.DeployData, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.DeployData|undefined} value */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.setDeploy = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.clearDeploy = function() {
  this.setDeploy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.hasDeploy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PCost cost = 2;
 * @return {?proto.PCost}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.getCost = function() {
  return /** @type{?proto.PCost} */ (
    jspb.Message.getWrapperField(this, RhoTypes_pb.PCost, 2));
};


/** @param {?proto.PCost|undefined} value */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.setCost = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.clearCost = function() {
  this.setCost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.hasCost = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Event deployLog = 3;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Event>}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.getDeploylogList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Event, 3));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Event>} value */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.setDeploylogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Event}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.addDeploylog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.coop.rchain.casper.protocol.Event, opt_index);
};


proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.clearDeploylogList = function() {
  this.setDeploylogList([]);
};


/**
 * repeated Event paymentLog = 4;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Event>}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.getPaymentlogList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Event, 4));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Event>} value */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.setPaymentlogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Event}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.addPaymentlog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.coop.rchain.casper.protocol.Event, opt_index);
};


proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.clearPaymentlogList = function() {
  this.setPaymentlogList([]);
};


/**
 * optional bool errored = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.getErrored = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.coop.rchain.casper.protocol.ProcessedDeploy.prototype.setErrored = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.Body.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.Body.displayName = 'proto.coop.rchain.casper.protocol.Body';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.Body.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.coop.rchain.casper.protocol.RChainState.toObject(includeInstance, f),
    deploysList: jspb.Message.toObjectList(msg.getDeploysList(),
    proto.coop.rchain.casper.protocol.ProcessedDeploy.toObject, includeInstance),
    extrabytes: msg.getExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.Body}
 */
proto.coop.rchain.casper.protocol.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.Body;
  return proto.coop.rchain.casper.protocol.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.Body}
 */
proto.coop.rchain.casper.protocol.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.RChainState;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.RChainState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.ProcessedDeploy;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ProcessedDeploy.deserializeBinaryFromReader);
      msg.addDeploys(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.RChainState.serializeBinaryToWriter
    );
  }
  f = message.getDeploysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.ProcessedDeploy.serializeBinaryToWriter
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional RChainState state = 1;
 * @return {?proto.coop.rchain.casper.protocol.RChainState}
 */
proto.coop.rchain.casper.protocol.Body.prototype.getState = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.RChainState} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.RChainState, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.RChainState|undefined} value */
proto.coop.rchain.casper.protocol.Body.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.Body.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.Body.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProcessedDeploy deploys = 2;
 * @return {!Array<!proto.coop.rchain.casper.protocol.ProcessedDeploy>}
 */
proto.coop.rchain.casper.protocol.Body.prototype.getDeploysList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.ProcessedDeploy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.ProcessedDeploy, 2));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.ProcessedDeploy>} value */
proto.coop.rchain.casper.protocol.Body.prototype.setDeploysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.ProcessedDeploy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.ProcessedDeploy}
 */
proto.coop.rchain.casper.protocol.Body.prototype.addDeploys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.coop.rchain.casper.protocol.ProcessedDeploy, opt_index);
};


proto.coop.rchain.casper.protocol.Body.prototype.clearDeploysList = function() {
  this.setDeploysList([]);
};


/**
 * optional bytes extraBytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Body.prototype.getExtrabytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes extraBytes = 3;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Body.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Body.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Body.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.Justification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.Justification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.Justification.displayName = 'proto.coop.rchain.casper.protocol.Justification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.Justification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.Justification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Justification.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.getValidator_asB64(),
    latestblockhash: msg.getLatestblockhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.Justification}
 */
proto.coop.rchain.casper.protocol.Justification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.Justification;
  return proto.coop.rchain.casper.protocol.Justification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.Justification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.Justification}
 */
proto.coop.rchain.casper.protocol.Justification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestblockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.Justification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.Justification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Justification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLatestblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.getValidator = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `getValidator()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.getValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidator()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.getValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidator()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Justification.prototype.setValidator = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes latestBlockHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.getLatestblockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes latestBlockHash = 2;
 * This is a type-conversion wrapper around `getLatestblockhash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.getLatestblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLatestblockhash()));
};


/**
 * optional bytes latestBlockHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestblockhash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Justification.prototype.getLatestblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLatestblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Justification.prototype.setLatestblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.RChainState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.RChainState.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.RChainState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.RChainState.displayName = 'proto.coop.rchain.casper.protocol.RChainState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.RChainState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.RChainState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.RChainState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.RChainState.toObject = function(includeInstance, msg) {
  var f, obj = {
    prestatehash: msg.getPrestatehash_asB64(),
    poststatehash: msg.getPoststatehash_asB64(),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.coop.rchain.casper.protocol.Bond.toObject, includeInstance),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.RChainState}
 */
proto.coop.rchain.casper.protocol.RChainState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.RChainState;
  return proto.coop.rchain.casper.protocol.RChainState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.RChainState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.RChainState}
 */
proto.coop.rchain.casper.protocol.RChainState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrestatehash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoststatehash(value);
      break;
    case 3:
      var value = new proto.coop.rchain.casper.protocol.Bond;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.Bond.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.RChainState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.RChainState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.RChainState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrestatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPoststatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.coop.rchain.casper.protocol.Bond.serializeBinaryToWriter
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bytes preStateHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getPrestatehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes preStateHash = 1;
 * This is a type-conversion wrapper around `getPrestatehash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getPrestatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrestatehash()));
};


/**
 * optional bytes preStateHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrestatehash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getPrestatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrestatehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.RChainState.prototype.setPrestatehash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes postStateHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getPoststatehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes postStateHash = 2;
 * This is a type-conversion wrapper around `getPoststatehash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getPoststatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPoststatehash()));
};


/**
 * optional bytes postStateHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPoststatehash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getPoststatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPoststatehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.RChainState.prototype.setPoststatehash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Bond bonds = 3;
 * @return {!Array<!proto.coop.rchain.casper.protocol.Bond>}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getBondsList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.Bond>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.Bond, 3));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.Bond>} value */
proto.coop.rchain.casper.protocol.RChainState.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.Bond=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.Bond}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.coop.rchain.casper.protocol.Bond, opt_index);
};


proto.coop.rchain.casper.protocol.RChainState.prototype.clearBondsList = function() {
  this.setBondsList([]);
};


/**
 * optional int64 blockNumber = 4;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.RChainState.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.RChainState.prototype.setBlocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.coop.rchain.casper.protocol.Event.oneofGroups_);
};
goog.inherits(proto.coop.rchain.casper.protocol.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.Event.displayName = 'proto.coop.rchain.casper.protocol.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.coop.rchain.casper.protocol.Event.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.coop.rchain.casper.protocol.Event.EventInstanceCase = {
  EVENT_INSTANCE_NOT_SET: 0,
  PRODUCE: 1,
  CONSUME: 2,
  COMM: 3
};

/**
 * @return {proto.coop.rchain.casper.protocol.Event.EventInstanceCase}
 */
proto.coop.rchain.casper.protocol.Event.prototype.getEventInstanceCase = function() {
  return /** @type {proto.coop.rchain.casper.protocol.Event.EventInstanceCase} */(jspb.Message.computeOneofCase(this, proto.coop.rchain.casper.protocol.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    produce: (f = msg.getProduce()) && proto.coop.rchain.casper.protocol.ProduceEvent.toObject(includeInstance, f),
    consume: (f = msg.getConsume()) && proto.coop.rchain.casper.protocol.ConsumeEvent.toObject(includeInstance, f),
    comm: (f = msg.getComm()) && proto.coop.rchain.casper.protocol.CommEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.Event}
 */
proto.coop.rchain.casper.protocol.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.Event;
  return proto.coop.rchain.casper.protocol.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.Event}
 */
proto.coop.rchain.casper.protocol.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.ProduceEvent;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ProduceEvent.deserializeBinaryFromReader);
      msg.setProduce(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.ConsumeEvent;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ConsumeEvent.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 3:
      var value = new proto.coop.rchain.casper.protocol.CommEvent;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.CommEvent.deserializeBinaryFromReader);
      msg.setComm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduce();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.ProduceEvent.serializeBinaryToWriter
    );
  }
  f = message.getConsume();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.ConsumeEvent.serializeBinaryToWriter
    );
  }
  f = message.getComm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.coop.rchain.casper.protocol.CommEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProduceEvent produce = 1;
 * @return {?proto.coop.rchain.casper.protocol.ProduceEvent}
 */
proto.coop.rchain.casper.protocol.Event.prototype.getProduce = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.ProduceEvent} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.ProduceEvent, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.ProduceEvent|undefined} value */
proto.coop.rchain.casper.protocol.Event.prototype.setProduce = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.coop.rchain.casper.protocol.Event.oneofGroups_[0], value);
};


proto.coop.rchain.casper.protocol.Event.prototype.clearProduce = function() {
  this.setProduce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.Event.prototype.hasProduce = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConsumeEvent consume = 2;
 * @return {?proto.coop.rchain.casper.protocol.ConsumeEvent}
 */
proto.coop.rchain.casper.protocol.Event.prototype.getConsume = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.ConsumeEvent} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.ConsumeEvent, 2));
};


/** @param {?proto.coop.rchain.casper.protocol.ConsumeEvent|undefined} value */
proto.coop.rchain.casper.protocol.Event.prototype.setConsume = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.coop.rchain.casper.protocol.Event.oneofGroups_[0], value);
};


proto.coop.rchain.casper.protocol.Event.prototype.clearConsume = function() {
  this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.Event.prototype.hasConsume = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommEvent comm = 3;
 * @return {?proto.coop.rchain.casper.protocol.CommEvent}
 */
proto.coop.rchain.casper.protocol.Event.prototype.getComm = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.CommEvent} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.CommEvent, 3));
};


/** @param {?proto.coop.rchain.casper.protocol.CommEvent|undefined} value */
proto.coop.rchain.casper.protocol.Event.prototype.setComm = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.coop.rchain.casper.protocol.Event.oneofGroups_[0], value);
};


proto.coop.rchain.casper.protocol.Event.prototype.clearComm = function() {
  this.setComm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.Event.prototype.hasComm = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ProduceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ProduceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ProduceEvent.displayName = 'proto.coop.rchain.casper.protocol.ProduceEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ProduceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ProduceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ProduceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelshash: msg.getChannelshash_asB64(),
    hash: msg.getHash_asB64(),
    persistent: jspb.Message.getFieldWithDefault(msg, 3, false),
    sequencenumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ProduceEvent}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ProduceEvent;
  return proto.coop.rchain.casper.protocol.ProduceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ProduceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ProduceEvent}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelshash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequencenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ProduceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ProduceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ProduceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSequencenumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes channelsHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getChannelshash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channelsHash = 1;
 * This is a type-conversion wrapper around `getChannelshash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getChannelshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelshash()));
};


/**
 * optional bytes channelsHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelshash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getChannelshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelshash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.setChannelshash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool persistent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.setPersistent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 sequenceNumber = 4;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.getSequencenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.ProduceEvent.prototype.setSequencenumber = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.ConsumeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.ConsumeEvent.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.ConsumeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.ConsumeEvent.displayName = 'proto.coop.rchain.casper.protocol.ConsumeEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.ConsumeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.ConsumeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelshashesList: msg.getChannelshashesList_asB64(),
    hash: msg.getHash_asB64(),
    persistent: jspb.Message.getFieldWithDefault(msg, 3, false),
    sequencenumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.ConsumeEvent}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.ConsumeEvent;
  return proto.coop.rchain.casper.protocol.ConsumeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.ConsumeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.ConsumeEvent}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addChannelshashes(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequencenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.ConsumeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.ConsumeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelshashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSequencenumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated bytes channelsHashes = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getChannelshashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes channelsHashes = 1;
 * This is a type-conversion wrapper around `getChannelshashesList()`
 * @return {!Array<string>}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getChannelshashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getChannelshashesList()));
};


/**
 * repeated bytes channelsHashes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelshashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getChannelshashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getChannelshashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.setChannelshashesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.addChannelshashes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.clearChannelshashesList = function() {
  this.setChannelshashesList([]);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool persistent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.setPersistent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 sequenceNumber = 4;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.getSequencenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.ConsumeEvent.prototype.setSequencenumber = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.CommEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coop.rchain.casper.protocol.CommEvent.repeatedFields_, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.CommEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.CommEvent.displayName = 'proto.coop.rchain.casper.protocol.CommEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coop.rchain.casper.protocol.CommEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.CommEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.CommEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.CommEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.CommEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    consume: (f = msg.getConsume()) && proto.coop.rchain.casper.protocol.ConsumeEvent.toObject(includeInstance, f),
    producesList: jspb.Message.toObjectList(msg.getProducesList(),
    proto.coop.rchain.casper.protocol.ProduceEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.CommEvent}
 */
proto.coop.rchain.casper.protocol.CommEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.CommEvent;
  return proto.coop.rchain.casper.protocol.CommEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.CommEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.CommEvent}
 */
proto.coop.rchain.casper.protocol.CommEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coop.rchain.casper.protocol.ConsumeEvent;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ConsumeEvent.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 2:
      var value = new proto.coop.rchain.casper.protocol.ProduceEvent;
      reader.readMessage(value,proto.coop.rchain.casper.protocol.ProduceEvent.deserializeBinaryFromReader);
      msg.addProduces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.CommEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.CommEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.CommEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.CommEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsume();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coop.rchain.casper.protocol.ConsumeEvent.serializeBinaryToWriter
    );
  }
  f = message.getProducesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.coop.rchain.casper.protocol.ProduceEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConsumeEvent consume = 1;
 * @return {?proto.coop.rchain.casper.protocol.ConsumeEvent}
 */
proto.coop.rchain.casper.protocol.CommEvent.prototype.getConsume = function() {
  return /** @type{?proto.coop.rchain.casper.protocol.ConsumeEvent} */ (
    jspb.Message.getWrapperField(this, proto.coop.rchain.casper.protocol.ConsumeEvent, 1));
};


/** @param {?proto.coop.rchain.casper.protocol.ConsumeEvent|undefined} value */
proto.coop.rchain.casper.protocol.CommEvent.prototype.setConsume = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coop.rchain.casper.protocol.CommEvent.prototype.clearConsume = function() {
  this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coop.rchain.casper.protocol.CommEvent.prototype.hasConsume = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProduceEvent produces = 2;
 * @return {!Array<!proto.coop.rchain.casper.protocol.ProduceEvent>}
 */
proto.coop.rchain.casper.protocol.CommEvent.prototype.getProducesList = function() {
  return /** @type{!Array<!proto.coop.rchain.casper.protocol.ProduceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coop.rchain.casper.protocol.ProduceEvent, 2));
};


/** @param {!Array<!proto.coop.rchain.casper.protocol.ProduceEvent>} value */
proto.coop.rchain.casper.protocol.CommEvent.prototype.setProducesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.coop.rchain.casper.protocol.ProduceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coop.rchain.casper.protocol.ProduceEvent}
 */
proto.coop.rchain.casper.protocol.CommEvent.prototype.addProduces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.coop.rchain.casper.protocol.ProduceEvent, opt_index);
};


proto.coop.rchain.casper.protocol.CommEvent.prototype.clearProducesList = function() {
  this.setProducesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coop.rchain.casper.protocol.Bond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coop.rchain.casper.protocol.Bond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coop.rchain.casper.protocol.Bond.displayName = 'proto.coop.rchain.casper.protocol.Bond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coop.rchain.casper.protocol.Bond.prototype.toObject = function(opt_includeInstance) {
  return proto.coop.rchain.casper.protocol.Bond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coop.rchain.casper.protocol.Bond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Bond.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.getValidator_asB64(),
    stake: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coop.rchain.casper.protocol.Bond}
 */
proto.coop.rchain.casper.protocol.Bond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coop.rchain.casper.protocol.Bond;
  return proto.coop.rchain.casper.protocol.Bond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coop.rchain.casper.protocol.Bond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coop.rchain.casper.protocol.Bond}
 */
proto.coop.rchain.casper.protocol.Bond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Bond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coop.rchain.casper.protocol.Bond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coop.rchain.casper.protocol.Bond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coop.rchain.casper.protocol.Bond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {!(string|Uint8Array)}
 */
proto.coop.rchain.casper.protocol.Bond.prototype.getValidator = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `getValidator()`
 * @return {string}
 */
proto.coop.rchain.casper.protocol.Bond.prototype.getValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidator()`
 * @return {!Uint8Array}
 */
proto.coop.rchain.casper.protocol.Bond.prototype.getValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidator()));
};


/** @param {!(string|Uint8Array)} value */
proto.coop.rchain.casper.protocol.Bond.prototype.setValidator = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 stake = 2;
 * @return {number}
 */
proto.coop.rchain.casper.protocol.Bond.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coop.rchain.casper.protocol.Bond.prototype.setStake = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.coop.rchain.casper.protocol);
